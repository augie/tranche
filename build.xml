<project name="Tranche Distributed Repository" default="dist.quick" basedir="./">
    <description>This is the Ant build script for the Tranche Distributed Repository.</description>

    <!-- Print out current date/time for log -->
    <tstamp><format property="BUILD_TIME" pattern="MM/dd/yyyy hh:mm aa" /></tstamp>
    <echo message="Build on ${BUILD_TIME}" />

    <!-- load properties from build.properties -->
    <property file="build.properties" />

    <!-- set global properties for this build -->
    <property name="src" location="src"/>
    <property name="test" location="test"/>
    <property name="lib"  location="lib"/>
    <property name="subprojects" location="subprojects"/>
    <property name="subprojects.gui" location="subprojects/GUI"/>
    <property name="src.gui" location="${subprojects.gui}/src"/>
    <property name="test.gui" location="${subprojects.gui}/test"/>
    <property name="lib.gui" location="${subprojects.gui}/lib"/>
    <property name="build" location="b"/>
    <property name="build.rt" location="${build}/rt"/>
    <property name="build.gui" location="b-gui"/>
    <property name="build.rt.gui" location="${build.gui}/rt"/>
    <property name="name.lib" value="lib"/>
    <property name="dist.lib" location="${dist}/${name.lib}"/>
    <property name="dist.lib.zip" location="${dist}/tranche-lib.zip"/>
    <property name="name.lib.gui" value="lib-gui"/>
    <property name="dist.lib.gui" location="${dist}/${name.lib.gui}"/>
    <property name="dist.lib.gui.zip" location="${dist}/tranche-lib-gui.zip"/>
    <property name="name.javadoc" value="javadocs"/>
    <property name="dist.javadoc" location="${dist}/${name.javadoc}"/>
    <property name="dist.javadoc.zip" location="${dist}/javadocs.zip"/>
    <property name="name.javadoc.gui" value="javadocs-gui"/>
    <property name="dist.javadoc.gui" location="${dist}/${name.javadoc.gui}"/>
    <property name="dist.javadoc.gui.zip" location="${dist}/javadocs-gui.zip"/>
    <property name="name.jar" value="tranche.jar"/>
    <property name="dist.jar" location="${dist}/${name.jar}"/>
    <property name="name.jar.gui" value="tranche-gui.jar"/>
    <property name="dist.jar.gui" location="${dist}/${name.jar.gui}"/>
    <property name="dist.zip" location="${dist}/tranche-b${buildNumber}.zip"/>
    <property name="dist.gui.zip" location="${dist}/tranche-gui-b${buildNumber}.zip"/>

    <!-- set the variables needed for the server build -->
    <property name="dir.server" location="build/server"/>
    <property name="build.server" location="${build}/server"/>
    <property name="build.server.jar" location="${build.server}/tranche-server.jar"/>
    <property name="dist.server.zip" location="${dist}/tranche-server-b${buildNumber}.zip"/>

    <!-- set the variables needed for the GetFileTool JAR build -->
    <property name="dir.get" location="build/get"/>
    <property name="build.get" location="${build}/get"/>
    <property name="build.get.jar" location="${build.get}/tranche-get.jar"/>
    <property name="dist.get.zip" location="${dist}/tranche-get-b${buildNumber}.zip"/>

    <!-- set the variables needed for the AddFileTool JAR build -->
    <property name="dir.add" location="build/add"/>
    <property name="build.add" location="${build}/add"/>
    <property name="build.add.jar" location="${build.add}/tranche-add.jar"/>
    <property name="dist.add.zip" location="${dist}/tranche-add-b${buildNumber}.zip"/>

    <!-- set the variables needed for the MakeRepositoryCertsTool JAR build -->
    <property name="dir.certs" location="build/certs"/>
    <property name="build.certs" location="${build}/certs"/>
    <property name="build.certs.jar" location="${build.certs}/tranche-certs.jar"/>
    <property name="dist.certs.zip" location="${dist}/tranche-certs-b${buildNumber}.zip"/>

    <!-- path required for runtime compiling-->
    <path id="path.rt.compile">
        <fileset dir="${lib}" includes="*.jar"/>
    </path>

    <!-- path required for runtime compiling w/GUI-->
    <path id="path.rt.compile.gui">
        <fileset dir="${lib}" includes="*.jar"/>
        <fileset dir="${lib.gui}" includes="*.jar"/>
        <pathelement path="${dist.jar}"/>
    </path>

    <!-- JUnit parameters -->
    <property name="build.test" location="b-test"/>
    <property name="build.test.results" location="${build.test}/junit"/>
    <property name="test.includes" value="**/*Test.java"/>
    <property name="dist.test" location="${dist}/junit"/>
    <property name="dist.clover" location="${dist}/clover"/>

    <!-- path required for building the test code-->
    <path id="path.test.compile">
    <path refid="path.rt.compile"/>
        <fileset dir="${lib.gui}" includes="*.jar"/>
    </path>

    <!-- path required for testing the runtime code -->
    <path id="path.test.rt">
    <!-- keep everything from the test compile -->
    <path refid="path.test.compile"/>
        <pathelement path="${build.test}"/>
        <pathelement path="${ant.home}/lib/clover.jar"/>
        <pathelement path="./clover.license"/>
    </path>

    <target name="dist.quick" description="Builds the code, signs JARs, and compiles JavaDocs." >
        <antcall target="rt.compile.gui"/>
        <antcall target="dist.server"/>
        <antcall target="dist.get"/>
        <antcall target="dist.add"/>
        <antcall target="dist.certs"/>
        <antcall target="sign-jars"/>
        <antcall target="javadoc"/>
        <antcall target="javadoc.gui"/>
        <zip destfile="${dist.lib.zip}" basedir="${dist.lib}"/>
        <zip destfile="${dist.lib.gui.zip}" basedir="${dist.lib.gui}"/>
        <zip destfile="${dist.javadoc.zip}" basedir="${dist.javadoc}"/>
        <zip destfile="${dist.javadoc.gui.zip}" basedir="${dist.javadoc.gui}"/>
        <zip destfile="${dist.zip}">
            <fileset file="${dist.jar}"/>
            <zipfileset dir="${dist.lib}" prefix="${name.lib}"/>
            <zipfileset dir="${dist.javadoc}" prefix="${name.javadoc}"/>
        </zip>
        <zip destfile="${dist.gui.zip}">
            <fileset file="${dist.jar.gui}"/>
            <zipfileset file="${dist.jar}" prefix="${name.lib.gui}"/>
            <zipfileset dir="${dist.lib.gui}" prefix="${name.lib.gui}"/>
            <zipfileset dir="${dist.javadoc.gui}" prefix="${name.javadoc.gui}"/>
        </zip>
    </target>

    <target name="dist.full" description="Builds the code, runs the JUnit tests, signs JARs, and compiles JavaDocs." >
        <antcall target="rt.compile.gui" />
        <antcall target="dist.server" />
        <antcall target="dist.get" />
        <antcall target="dist.add" />
        <antcall target="dist.certs" />
        <antcall target="javadoc" />
        <antcall target="javadoc.gui" />
        <antcall target="clover" />
        <antcall target="sign-jars" />
        <zip destfile="${dist.lib.zip}" basedir="${dist.lib}" />
        <zip destfile="${dist.lib.gui.zip}" basedir="${dist.lib.gui}" />
        <zip destfile="${dist.javadoc.zip}" basedir="${dist.javadoc}" />
        <zip destfile="${dist.javadoc.gui.zip}" basedir="${dist.javadoc.gui}" />
        <zip destfile="${dist.zip}">
            <fileset file="${dist.jar}"/>
            <zipfileset dir="${dist.lib}" prefix="${name.lib}"/>
            <zipfileset dir="${dist.javadoc}" prefix="${name.javadoc}"/>
        </zip>
        <zip destfile="${dist.gui.zip}">
            <fileset file="${dist.jar.gui}"/>
            <zipfileset dir="${dist.lib.gui}" prefix="${name.lib.gui}"/>
            <zipfileset dir="${dist.javadoc.gui}" prefix="${name.javadoc.gui}"/>
        </zip>
    </target>

    <target name="clean" description="Delete all files from the previous build.">
        <delete dir="${build}"/>
        <delete dir="${build.gui}"/>
        <delete dir="${build.test}"/>
        <delete dir="${dist}"/>
        <!-- tomcat makes this directory -->
        <delete dir="work"/>
        <delete file="build.xml~"/>
        <!-- Delete clover files -->
        <delete>
            <fileset dir="." includes="**/mycoverage.db*"/>
        </delete>
    </target>

    <target name="init" depends="clean">
        <tstamp/>
        <mkdir dir="${build}"/>
        <mkdir dir="${build.gui}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist.lib}"/>
        <mkdir dir="${dist.lib.gui}"/>
    </target>

    <!-- Compiles all the code required for runtime -->
    <target name="rt.compile" depends="init" description="Compiles the core source code.">
        <!-- create the temporary directory for the source code -->
        <mkdir dir="${build}/java"/>
        <copy todir="${build}/java">
            <fileset dir="${src}"/>
        </copy>
        <copy todir="${dist.lib}">
            <fileset dir="${lib}"/>
        </copy>

        <!-- replace all placeholder tokens -->
        <replace includes="**/*.html,**/*.java" dir="${build}/java" token="@buildNumber" value="${buildNumber}" />

        <!-- compile all the code -->
        <mkdir dir="${build.rt}"/>
        <javac destdir="${build.rt}" debug="true" source="1.5">
            <src path="${build}/java"/>
            <classpath refid="path.rt.compile"/>
        </javac>

        <!-- copy all non-java files from src to dest dir -->
        <copy todir="${build.rt}">
            <fileset dir="${src}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <jar jarfile="${dist.jar}">
            <fileset dir="${build.rt}" includes="**/*.*"/>
            <manifest>
                <attribute name="Main-Class" value="org.tranche.LocalDataServer"/>
            </manifest>
        </jar>
    </target>

    <!-- Compiles all the code required for runtime -->
    <target name="rt.compile.gui" depends="rt.compile" description="Compiles the GUI subproject source code.">
        <!-- create the temporary directory for the source code -->
        <mkdir dir="${build.gui}/java"/>
        <copy todir="${build.gui}/java">
            <fileset dir="${src.gui}"/>
        </copy>
        <copy todir="${dist.lib.gui}">
            <fileset dir="${lib}"/>
            <fileset dir="${lib.gui}"/>
        </copy>

        <!-- replace all placeholder tokens -->
        <replace includes="**/*.html,**/*.java" dir="${build.gui}/java" token="@buildNumber" value="${buildNumber}" />

        <!-- compile all the code -->
        <mkdir dir="${build.rt.gui}"/>
        <javac destdir="${build.rt.gui}" debug="true" source="1.5">
            <src path="${build.gui}/java"/>
            <classpath refid="path.rt.compile.gui"/>
        </javac>

        <!-- copy all non-java files from src to dest dir -->
        <copy todir="${build.rt.gui}">
            <fileset dir="${src.gui}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <jar jarfile="${dist.jar.gui}">
            <fileset dir="${build.rt.gui}" includes="**/*.*" />
            <manifest>
                <attribute name="Main-Class" value="org.tranche.gui.advanced.AdvancedGUI" />
            </manifest>
        </jar>
    </target>

    <target name="javadoc" description="Creates the JavaDocs for the core source code.">
        <mkdir dir="${dist.javadoc}"/>
        <javadoc destdir="${dist.javadoc}" author="true" version="true" use="true" windowtitle="Tranche Distributed Repository (Build #${buildNumber}) Java API Documentation">
            <classpath refid="path.rt.compile"/>
            <fileset dir="${src}">
                <include name="org/tranche/*.java"/>
                <include name="org/tranche/**/*.java"/>
            </fileset>
            <doctitle><![CDATA[<h1>Tranche Distributed Repository</h1>]]></doctitle>
            <bottom><![CDATA[<i>This code is free for use both commercially and non-commercially as stated in the <a href="https://trancheproject.org/license.jsp" target="_blank">project's license</a></i>]]></bottom>
        </javadoc>
    </target>

    <target name="javadoc.gui" description="Creates the JavaDocs for the GUI subproject source code.">
        <mkdir dir="${dist.javadoc.gui}"/>
        <javadoc destdir="${dist.javadoc.gui}" author="true" version="true" use="true" windowtitle="Tranche Distributed Repository GUI (Build #${buildNumber}) Java API Documentation">
            <classpath refid="path.rt.compile.gui"/>
            <fileset dir="${src.gui}">
                <include name="org/tranche/*.java"/>
                <include name="org/tranche/**/*.java"/>
            </fileset>
            <doctitle><![CDATA[<h1>Tranche Distributed Repository GUI</h1>]]></doctitle>
            <bottom><![CDATA[<i>This code is free for use both commercially and non-commercially as stated in the <a href="https://trancheproject.org/license.jsp" target="_blank">project's license</a></i>]]></bottom>
        </javadoc>
    </target>

    <target name="dist.server" description="Make a server code release.">
        <mkdir dir="${build.server}"/>
        <mkdir dir="${build.server}/lib"/>
        <copy todir="${build.server}/lib">
            <fileset dir="${lib}" includes="*.jar"/>
        </copy>
        <copy todir="${build.server}">
            <fileset dir="${dir.server}" excludesFile="${dir.server}/MANIFEST.MF"/>
        </copy>
        <jar jarfile="${build.server.jar}"
             manifest="${dir.server}/MANIFEST.MF"
             basedir="${build.rt}" />
        <zip destfile="${dist.server.zip}" basedir="${build.server}" />
    </target>

    <target name="dist.certs" description="Makes a JAR for the make default certificates tool.">
        <mkdir dir="${build.certs}"/>
        <mkdir dir="${build.certs}/lib"/>
        <copy todir="${build.certs}/lib">
            <fileset dir="${lib}" includes="*.jar"/>
        </copy>
        <copy todir="${build.certs}">
            <fileset dir="${dir.certs}" excludesFile="${dir.certs}/MANIFEST.MF"/>
        </copy>
        <jar jarfile="${build.certs.jar}"
             manifest="${dir.certs}/MANIFEST.MF"
             basedir="${build.rt}" />
        <zip destfile="${dist.certs.zip}" basedir="${build.certs}" />
    </target>

    <target name="dist.get" description="Makes a JAR for the get file tool.">
        <mkdir dir="${build.get}"/>
        <mkdir dir="${build.get}/lib"/>
        <copy todir="${build.get}/lib">
            <fileset dir="${lib}" includes="*.jar"/>
        </copy>
        <copy todir="${build.get}">
            <fileset dir="${dir.get}" excludesFile="${dir.get}/MANIFEST.MF"/>
        </copy>
        <jar jarfile="${build.get.jar}"
             manifest="${dir.get}/MANIFEST.MF"
             basedir="${build.rt}" />
        <zip destfile="${dist.get.zip}" basedir="${build.get}" />
    </target>

    <target name="dist.add" description="Makes a JAR for the add file tool.">
        <mkdir dir="${build.add}"/>
        <mkdir dir="${build.add}/lib"/>
        <copy todir="${build.add}/lib">
            <fileset dir="${lib}" includes="*.jar"/>
        </copy>
        <copy todir="${build.add}">
            <fileset dir="${dir.add}" excludesFile="${dir.add}/MANIFEST.MF"/>
        </copy>
        <jar jarfile="${build.add.jar}"
             manifest="${dir.add}/MANIFEST.MF"
             basedir="${build.rt}" />
        <zip destfile="${dist.add.zip}" basedir="${build.add}" />
    </target>

    <!-- Executes the JUnit tests on the code -->
    <target name="test" depends="test.run, test.report" description="Build and run tests, run regression tests, generate reports" />

    <!-- Compiles all the code required for a test -->
    <target name="test.compile" description="Compile the test source code.">
        <mkdir dir="${build.test}"/>
        <javac destdir="${build.test}" debug="true" source="1.5">
            <src path="${src}"/>
            <src path="${src.gui}"/>
            <src path="${test}"/>
            <src path="${test.gui}"/>
            <classpath refid="path.test.compile"/>
        </javac>

        <!-- copy all non-java files from test to dest dir -->
        <copy todir="${build.test}">
            <fileset dir="${test}">
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${test.gui}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="test.run" depends="test.compile" description="Runs the tests.">
        <mkdir dir="${build.test.results}"/>
        <junit showoutput="true" fork="true" dir="${build.test}" maxmemory="750m">
            <batchtest todir="${build.test.results}">
                <fileset dir="${test}" includes="${test.includes}"/>
                <fileset dir="${test.gui}" includes="${test.includes}"/>
            </batchtest>
            <classpath refid="path.test.rt"/>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
        </junit>
    </target>

    <target name="test.report">
        <mkdir dir="${dist.test}"/>
        <junitreport todir="${dist.test}">
            <fileset dir="${build.test.results}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${dist.test}"/>
        </junitreport>
    </target>

    <!-- sign all the JARs so that they work with WebStart -->
    <target name="sign-jars">
        <property name="Tranche.jar" value="${dist.jar}" />
        <property name="Tranche" value="${dist}/Tranche" />
        <unzip src="${Tranche.jar}" dest="${Tranche}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${Tranche.jar}"/>
        <zip destfile="${Tranche.jar}" basedir="${Tranche}"/>
        <delete dir="${Tranche}"/>
        <signjar jar="${Tranche.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="TrancheGUI.jar" value="${dist.jar.gui}" />
        <property name="TrancheGUI" value="${dist}/TrancheGUI" />
        <unzip src="${TrancheGUI.jar}" dest="${TrancheGUI}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${TrancheGUI.jar}"/>
        <zip destfile="${TrancheGUI.jar}" basedir="${TrancheGUI}"/>
        <delete dir="${TrancheGUI}"/>
        <signjar jar="${TrancheGUI.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="bcprov-jdk15-130.jar" value="${dist.lib}/bcprov-jdk15-130.jar" />
        <property name="bcprov-jdk15-130" value="${dist.lib}/bcprov-jdk15-130" />
        <unzip src="${bcprov-jdk15-130.jar}" dest="${bcprov-jdk15-130}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${bcprov-jdk15-130.jar}"/>
        <zip destfile="${bcprov-jdk15-130.jar}" basedir="${bcprov-jdk15-130}"/>
        <delete dir="${bcprov-jdk15-130}"/>
        <signjar jar="${bcprov-jdk15-130.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="commons-logging.jar" value="${dist.lib}/commons-logging.jar" />
        <property name="commons-logging" value="${dist.lib}/commons-logging" />
        <unzip src="${commons-logging.jar}" dest="${commons-logging}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${commons-logging.jar}"/>
        <zip destfile="${commons-logging.jar}" basedir="${commons-logging}"/>
        <delete dir="${commons-logging}"/>
        <signjar jar="${commons-logging.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="commons-codec-1.3.jar" value="${dist.lib}/commons-codec-1.3.jar" />
        <property name="commons-codec-1.3" value="${dist.lib}/commons-codec-1.3" />
        <unzip src="${commons-codec-1.3.jar}" dest="${commons-codec-1.3}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${commons-codec-1.3.jar}"/>
        <zip destfile="${commons-codec-1.3.jar}" basedir="${commons-codec-1.3}"/>
        <delete dir="${commons-codec-1.3}"/>
        <signjar jar="${commons-codec-1.3.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="commons-httpclient-3.0-rc4.jar" value="${dist.lib}/commons-httpclient-3.0-rc4.jar" />
        <property name="commons-httpclient-3.0-rc4" value="${dist.lib}/commons-httpclient-3.0-rc4" />
        <unzip src="${commons-httpclient-3.0-rc4.jar}" dest="${commons-httpclient-3.0-rc4}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${commons-httpclient-3.0-rc4.jar}"/>
        <zip destfile="${commons-httpclient-3.0-rc4.jar}" basedir="${commons-httpclient-3.0-rc4}"/>
        <delete dir="${commons-httpclient-3.0-rc4}"/>
        <signjar jar="${commons-httpclient-3.0-rc4.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="commons-net-1.4.1.jar" value="${dist.lib}/commons-net-1.4.1.jar" />
        <property name="commons-net-1.4.1" value="${dist.lib}/commons-net-1.4.1" />
        <unzip src="${commons-net-1.4.1.jar}" dest="${commons-net-1.4.1}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${commons-net-1.4.1.jar}"/>
        <zip destfile="${commons-net-1.4.1.jar}" basedir="${commons-net-1.4.1}"/>
        <delete dir="${commons-net-1.4.1}"/>
        <signjar jar="${commons-net-1.4.1.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="ProteomeCommons.org-IO.jar" value="${dist.lib}/ProteomeCommons.org-IO.jar" />
        <property name="ProteomeCommons.org-IO" value="${dist.lib}/ProteomeCommons.org-IO" />
        <unzip src="${ProteomeCommons.org-IO.jar}" dest="${ProteomeCommons.org-IO}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${ProteomeCommons.org-IO.jar}"/>
        <zip destfile="${ProteomeCommons.org-IO.jar}" basedir="${ProteomeCommons.org-IO}"/>
        <delete dir="${ProteomeCommons.org-IO}"/>
        <signjar jar="${ProteomeCommons.org-IO.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-carbon-macosx.jar" value="${dist.lib.gui}/swt-carbon-macosx.jar" />
        <property name="swt-carbon-macosx" value="${dist.lib.gui}/swt-carbon-macosx" />
        <unzip src="${swt-carbon-macosx.jar}" dest="${swt-carbon-macosx}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-carbon-macosx.jar}"/>
        <zip destfile="${swt-carbon-macosx.jar}" basedir="${swt-carbon-macosx}"/>
        <delete dir="${swt-carbon-macosx}"/>
        <signjar jar="${swt-carbon-macosx.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-gtk-linux-ppc.jar" value="${dist.lib.gui}/swt-gtk-linux-ppc.jar" />
        <property name="swt-gtk-linux-ppc" value="${dist.lib.gui}/swt-gtk-linux-ppc" />
        <unzip src="${swt-gtk-linux-ppc.jar}" dest="${swt-gtk-linux-ppc}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-gtk-linux-ppc.jar}"/>
        <zip destfile="${swt-gtk-linux-ppc.jar}" basedir="${swt-gtk-linux-ppc}"/>
        <delete dir="${swt-gtk-linux-ppc}"/>
        <signjar jar="${swt-gtk-linux-ppc.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-motif-linux-x86.jar" value="${dist.lib.gui}/swt-motif-linux-x86.jar" />
        <property name="swt-motif-linux-x86" value="${dist.lib.gui}/swt-motif-linux-x86" />
        <unzip src="${swt-motif-linux-x86.jar}" dest="${swt-motif-linux-x86}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-motif-linux-x86.jar}"/>
        <zip destfile="${swt-motif-linux-x86.jar}" basedir="${swt-motif-linux-x86}"/>
        <delete dir="${swt-motif-linux-x86}"/>
        <signjar jar="${swt-motif-linux-x86.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-gtk-linux-x86.jar" value="${dist.lib.gui}/swt-gtk-linux-x86.jar" />
        <property name="swt-gtk-linux-x86" value="${dist.lib.gui}/swt-gtk-linux-x86" />
        <unzip src="${swt-gtk-linux-x86.jar}" dest="${swt-gtk-linux-x86}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-gtk-linux-x86.jar}"/>
        <zip destfile="${swt-gtk-linux-x86.jar}" basedir="${swt-gtk-linux-x86}"/>
        <delete dir="${swt-gtk-linux-x86}"/>
        <signjar jar="${swt-gtk-linux-x86.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-gtk-linux-x86_64.jar" value="${dist.lib.gui}/swt-gtk-linux-x86_64.jar" />
        <property name="swt-gtk-linux-x86_64" value="${dist.lib.gui}/swt-gtk-linux-x86_64" />
        <unzip src="${swt-gtk-linux-x86_64.jar}" dest="${swt-gtk-linux-x86_64}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-gtk-linux-x86_64.jar}"/>
        <zip destfile="${swt-gtk-linux-x86_64.jar}" basedir="${swt-gtk-linux-x86_64}"/>
        <delete dir="${swt-gtk-linux-x86_64}"/>
        <signjar jar="${swt-gtk-linux-x86_64.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-gtk-solaris-sparc.jar" value="${dist.lib.gui}/swt-gtk-solaris-sparc.jar" />
        <property name="swt-gtk-solaris-sparc" value="${dist.lib.gui}/swt-gtk-solaris-sparc" />
        <unzip src="${swt-gtk-solaris-sparc.jar}" dest="${swt-gtk-solaris-sparc}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-gtk-solaris-sparc.jar}"/>
        <zip destfile="${swt-gtk-solaris-sparc.jar}" basedir="${swt-gtk-solaris-sparc}"/>
        <delete dir="${swt-gtk-solaris-sparc}"/>
        <signjar jar="${swt-gtk-solaris-sparc.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-motif-aix-ppc.jar" value="${dist.lib.gui}/swt-motif-aix-ppc.jar" />
        <property name="swt-motif-aix-ppc" value="${dist.lib.gui}/swt-motif-aix-ppc" />
        <unzip src="${swt-motif-aix-ppc.jar}" dest="${swt-motif-aix-ppc}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-motif-aix-ppc.jar}"/>
        <zip destfile="${swt-motif-aix-ppc.jar}" basedir="${swt-motif-aix-ppc}"/>
        <delete dir="${swt-motif-aix-ppc}"/>
        <signjar jar="${swt-motif-aix-ppc.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-motif-linux-x86.jar" value="${dist.lib.gui}/swt-motif-linux-x86.jar" />
        <property name="swt-motif-linux-x86" value="${dist.lib.gui}/swt-motif-linux-x86" />
        <unzip src="${swt-motif-linux-x86.jar}" dest="${swt-motif-linux-x86}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-motif-linux-x86.jar}"/>
        <zip destfile="${swt-motif-linux-x86.jar}" basedir="${swt-motif-linux-x86}"/>
        <delete dir="${swt-motif-linux-x86}"/>
        <signjar jar="${swt-motif-linux-x86.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-motif-solaris-sparc.jar" value="${dist.lib.gui}/swt-motif-solaris-sparc.jar" />
        <property name="swt-motif-solaris-sparc" value="${dist.lib.gui}/swt-motif-solaris-sparc" />
        <unzip src="${swt-motif-solaris-sparc.jar}" dest="${swt-motif-solaris-sparc}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-motif-solaris-sparc.jar}"/>
        <zip destfile="${swt-motif-solaris-sparc.jar}" basedir="${swt-motif-solaris-sparc}"/>
        <delete dir="${swt-motif-solaris-sparc}"/>
        <signjar jar="${swt-motif-solaris-sparc.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-photon-qnx-x86.jar" value="${dist.lib.gui}/swt-photon-qnx-x86.jar" />
        <property name="swt-photon-qnx-x86" value="${dist.lib.gui}/swt-photon-qnx-x86" />
        <unzip src="${swt-photon-qnx-x86.jar}" dest="${swt-photon-qnx-x86}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-photon-qnx-x86.jar}"/>
        <zip destfile="${swt-photon-qnx-x86.jar}" basedir="${swt-photon-qnx-x86}"/>
        <delete dir="${swt-photon-qnx-x86}"/>
        <signjar jar="${swt-photon-qnx-x86.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-win32-wce_ppc-arm-j2me.jar" value="${dist.lib.gui}/swt-win32-wce_ppc-arm-j2me.jar" />
        <property name="swt-win32-wce_ppc-arm-j2me" value="${dist.lib.gui}/swt-win32-wce_ppc-arm-j2me" />
        <unzip src="${swt-win32-wce_ppc-arm-j2me.jar}" dest="${swt-win32-wce_ppc-arm-j2me}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-win32-wce_ppc-arm-j2me.jar}"/>
        <zip destfile="${swt-win32-wce_ppc-arm-j2me.jar}" basedir="${swt-win32-wce_ppc-arm-j2me}"/>
        <delete dir="${swt-win32-wce_ppc-arm-j2me}"/>
        <signjar jar="${swt-win32-wce_ppc-arm-j2me.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-win32-wce_ppc-arm-j2se.jar" value="${dist.lib.gui}/swt-win32-wce_ppc-arm-j2se.jar" />
        <property name="swt-win32-wce_ppc-arm-j2se" value="${dist.lib.gui}/swt-win32-wce_ppc-arm-j2se" />
        <unzip src="${swt-win32-wce_ppc-arm-j2se.jar}" dest="${swt-win32-wce_ppc-arm-j2se}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-win32-wce_ppc-arm-j2se.jar}"/>
        <zip destfile="${swt-win32-wce_ppc-arm-j2se.jar}" basedir="${swt-win32-wce_ppc-arm-j2se}"/>
        <delete dir="${swt-win32-wce_ppc-arm-j2se}"/>
        <signjar jar="${swt-win32-wce_ppc-arm-j2se.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-win32-win32-x86.jar" value="${dist.lib.gui}/swt-win32-win32-x86.jar" />
        <property name="swt-win32-win32-x86" value="${dist.lib.gui}/swt-win32-win32-x86" />
        <unzip src="${swt-win32-win32-x86.jar}" dest="${swt-win32-win32-x86}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-win32-win32-x86.jar}"/>
        <zip destfile="${swt-win32-win32-x86.jar}" basedir="${swt-win32-win32-x86}"/>
        <delete dir="${swt-win32-win32-x86}"/>
        <signjar jar="${swt-win32-win32-x86.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>

        <property name="swt-wpf-win32-x86.jar" value="${dist.lib.gui}/swt-wpf-win32-x86.jar" />
        <property name="swt-wpf-win32-x86" value="${dist.lib.gui}/swt-wpf-win32-x86" />
        <unzip src="${swt-wpf-win32-x86.jar}" dest="${swt-wpf-win32-x86}">
            <patternset>
                <exclude name="**/*.RSA"/>
                <exclude name="**/*.rsa"/>
                <exclude name="**/*.sf"/>
                <exclude name="**/*.SF"/>
            </patternset>
        </unzip>
        <delete file="${swt-wpf-win32-x86.jar}"/>
        <zip destfile="${swt-wpf-win32-x86.jar}" basedir="${swt-wpf-win32-x86}"/>
        <delete dir="${swt-wpf-win32-x86}"/>
        <signjar jar="${swt-wpf-win32-x86.jar}" alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePassword}"/>
    </target>

    <!-- clover tasks -->
    <taskdef resource="clovertasks"/>

    <target name="clover.configure">
        <clover-setup initString="${build.gui}/mycoverage.db">
            <files>
                <!-- ignore test files -->
                <exclude name="**/*Test.java"/>

                <!-- ignore the gui -->
                <exclude name="org/tranche/gui/*.java"/>
                <exclude name="org/tranche/gui/**/*.java"/>

                <!-- ignore non-testable coode -->
                <exclude name="org/tranche/tags/*.java"/>
                <exclude name="org/tranche/network/NetworkPackageTestCase.java"/>
                <exclude name="org/tranche/network/NetworkRandomUtil.java"/>
                <exclude name="org/tranche/util/DevUtil.java"/>
                <exclude name="org/tranche/util/FailingFlatFileTrancheServer.java"/>
                <exclude name="org/tranche/util/TestNetwork.java"/>
                <exclude name="org/tranche/util/TestServerConfiguration.java"/>
                <exclude name="org/tranche/util/TrancheTestCase.java"/>
                <exclude name="org/tranche/util/Utils.java"/>

                <!-- ignore a few helper classes -->
                <exclude name="org/tranche/hash/Base64.java"/>
            </files>
        </clover-setup>
    </target>

    <!-- makes an HTML report of the clover data -->
    <target name="clover" depends="clover.configure, test">
        <mkdir dir="${dist.clover}"/>
        <clover-report>
            <current outfile="${dist.clover}">
                <format type="html"/>
            </current>
        </clover-report>
    </target>

</project>
