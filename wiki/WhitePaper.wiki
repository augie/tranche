#labels Phase-Design
==Table of Contents==
  * [WhitePaper#Assumptions Assumptions]
  * [WhitePaper#Hash Hash]
  * [WhitePaper#Hash_Span Hash Span]
  * [WhitePaper#File_Structure File Structure]
  * [WhitePaper#Data_Chunk Data Chunk]
  * [WhitePaper#MetaData Meta Data]
  * [WhitePaper#ProjectFile Project File]


===Assumptions===

While designing the repository, our design decisions were guided by these general principles:
  * Hardware is of varying quality and have different features and capabilities. The server hardware will be bought and maintained by various institutions.
  * Hardware failures are inevitable. Even the best hardware will fail eventually.
  * Servers are distributed across multiple timezones.
  * Files being deposited vary widely in size. For proteomics, some mass spectrometers output thousands of small files with one spectra each, while others output a single file containing all of the spectra.
  * Deposited files should not be modified; if they are, there should be a way to demonstrate that the data has changed while making both old and new versions available.
  * Servers will be housed at organizations, institutions, and universities, which have reliable, high-bandwidth Internet connections.


===Hash===

A hash is used to represent data on a Tranche repository and is generated by a specially-designed hashing algorithm. The hash is central to the design of the repository – it is the reference for all uploaded data. When a file is uploaded to the repository, its contents are hashed and the file is referenced by this hash. The same is true for pieces of files, known as data chunks, which we will discuss shortly. Given the data set, a hash can be regenerated, so data integrity can be verified.

Here is an example of what a hash looks like in Tranche:
{{{
gkdxuVdBS+7gTS7CAnVlXsunahDEYDJmcpfohhcCbowwvKQEA0EHIIAP32Tfh4QRTTJFezCI1YSoZULTet4IisWOAVkAAAAAAAACLw==
}}}

The hashing function combines three different hashing algorithms with the size of the file to produce a 76-byte identifier:
  # MD5 (16 bytes)
  # SHA-1 (20 bytes) 
  # SHA-256 (32 bytes) 
  # Length of represented data (8 bytes) 

The purpose of combining three different hashing schemes and the length of the data is to reduce the likelihood of collision. Since each hashing scheme is independently generated, the addition of each exponentially reduces the likelihood of collision.
The resulting hash is usually encoded as a base-64 string, but is also often represented using base-16 encoding, particularly when being passed in a URL. Since the identifier is 76 bytes (or 608 bits), there is a total of 2^608 possible hashes, regardless of how it is encoded.


===Hash Span===

A hash span is an inclusive range of hashes. A "full hash span" is defined as the complete range of possible hashes – from 0 to 2^608.


===File Structure===

Files stored on the repository are split into data chunks, each of which is a maximum of one megabyte in size. Each file that is uploaded has an associated meta data chunk, which contains an ordered list of all the data chunks, along with other useful information. The metadata chunk is important in both locating the data chunks for any file as well as reassembling that file. Data chunks and meta data may be referred to as "chunks" when there is no need to distinguish between the two.

A directory of files can be uploaded together; these uploads are interchangeably called a "data set" or a "project". When a data set is uploaded, a special file called the !ProjectFile is generated. This file is used internally by Tranche to describe the contents of the data set, and is downloaded by a client, then used to retrieve the meta data chunks for all the files and discarded from that client machine. Like any other file, the !ProjectFile has a meta data chunk that is used to locate the !ProjectFile data chunks and reassemble them. The hash for the !ProjectFile metadata chunk is considered the hash for the data set, and is used to download the entire data set.


===Data Chunk===

Data chunks, identified by their hash values, are byte arrays with a maximum length of one megabyte. Any file uploaded to Tranche will have one or more data chunks. Data chunks contain no metainformation, and are only useful when the clent can access the associated file's metadata.


===!MetaData===

Identified by the hash of the file it describes, the metadata chunk contains information used to find, describe and reconstruct the file.

The same file can be uploaded by multiple users or by the same user in multiple data sets. This is particularly likely in cases where automatically generated files are uploaded. For this reason, the metadata must distinguish between the varying contexts in which the file might appear. Together, the signature, the UNIX timestamp of upload, and the relative path of the file in a data set uniquely identifies a shared file on the repository. Since hash collision is highly unlikely, it is assumed that all metadata addressed by the same hash designate files with identical contents.

As a file is being uploaded, it might be encoded in a variety of ways, such as to encrypt or compress the data. These "file encodings" can use any supported algorithms, and can be applied to the data in any order. Each file encoding has a different hash; since there might be multiple file encodings, they must be stored in order in metadata so that they can be processed properly by the client when unencoding the data. Files are identified by their original hashes, so multiple instances of a metadata chunk may represent files that have been uploaded with different file encoding lists. For example, the same file might be uploaded three times; the first could be compressed using the LZMA algorithm, while the second could be compressed using the GZIP algorithm, and the last might not be compressed. The metadata chunk is still referenced by the same hash, which is generated from the unencoded data for the entire file. In other words, a metadata chunk's hash is independent of its file encodings.

If an encrypted file were to be referenced by the unencoded hash, in the case that another copy of the file is in a Tranche repository, one could compare the identical file's hash to discover the contents of a file. For this reason, the passphrase is hashed and this string is added to the end of the contents of the file during hashing. This serves to obscure the contents of the file while still allowing for verification of the integrity of the file. 

Each file encoding has associated properties for storing arbitrary information that Tranche can used internally for important features. For example, an encrypted data set can be decrypted by setting the passphrase into the properties of the associated encryption file encoding. This means the passphrase will be publicly visible, so the same passphrase should not be used on more than one upload. Every time an encrypted file is downloaded, the download tool checks the encryption file encoding for the passphrase before requesting the user to enter one. In this way, encrypted files can be made public without performing a new upload.


===!ProjectFile==

The !ProjectFile is used to represent directory uploads, known as a "data set". This object contains the information that is necessary to reconstruct the directory during a download and is uploaded as a file to the repository after all other files have been uploaded. It is intended only for internal use, and is only stored temporarily on a client machine during a download. The hash of the !ProjectFile is the hash that represents the data set.

A !ProjectFile consists primarily of a collection of !ProjectFile parts. A !ProjectFile part consists of the relative name of the file (the directory structure plus the name of the file) and the hash of the metadata for the file. Unlike a file, the hash assigned to a data set depends on the naming of files on the uploading user's file system because a !ProjectFile part contains the relative name of a file in the directory, and thus changing the name of a file or directory will change the hash of the upload.