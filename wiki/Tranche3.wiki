  * [Tranche3#Features Features]
  * [Tranche3#Design Design]


=Features=

Please also add any features you think may be implied by one of the features shown. *Bold* text denotes a minimum feature.

  * *Upload a file or directory of files (data set)*
    * *Default permissions: private*
    * *Default license: creative commons zero*
  * *Modify at any time the permissions for which users or groups of users can view/download/modify a data set.*
  * *Ability to lock parts/all of data set permission.*
  * *Ability to lock a license.*
  * *Ability to lock a data set from deletion.*
  * *Modify at any time the license for use of a data set. Track these changes.*
  * *Ability to independently validate the downloaded content using common hashing algorithms.*
  * *Ability to cite the data set unambiguously along with a hash that can be used to validate its contents.*
  * *Backwards compatibility with the existing Tranche repository features and content*
    * *Download and upload all data sets*
    * *Map all old Tranche hashes to new unique identifiers*
  * *Java Web Start Swing-based GUI for uploading, modifying permissions/licensing*
  * *Upload/download via FTP*
  * *Monitoring abilities*
    * *Traffic*
    * *Usage/load statistics*
    * *Memory usage, contents*
    * *Connections*
    * Graphs
    * Mining
  * Machine-readable license information.
  * HTTP uploading, downloading, modifying permissions/licensing, browsing, searching
  * Data set versioning
  * Delete a file or data set as long as it's not published
  * Segment an existing data set for easier download.



=Design=

The internal software design. It should be robust, scalable, and meet all user features.

For simplicity's sake, the Tranche layer will not store any information. As requests come in, the Tranche layer will access the appropriate information either from a MySQL database (users, groups, permissions, possible licenses) or the iRODS data repository (data set info). 

When a data set is uploaded, it can be given a unique identifier that is an auto-incrementing number. As a data set is uploaded, the files should be hashed using the MD5 algorithm. That hash should be stored in the meta data database. Once all the files have been hashed, the hashes should then be hashed together in ascending alphabetical ASCII value order of the file names to create the MD5 hash of the data set.

Caching may be used to speed up response times, with the trade-off being a small amount of time after a change when some information will need to "propagate".

Use only standard protocols for upload and download (FTP, HTTP).