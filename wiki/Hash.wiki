A hash is used to represent data on a Tranche repository and is generated by a specially-designed hashing algorithm. The hash is central to the design of the repository â€“ it is the reference for all uploaded data. When a file is uploaded to the repository, its contents are hashed and the file is referenced by this hash. The same is true for pieces of files, known as data chunks, which we will discuss shortly. Given the data set, a hash can be regenerated, so data integrity can be verified.

Here is an example of what a hash looks like in Tranche:
{{{
gkdxuVdBS+7gTS7CAnVlXsunahDEYDJmcpfohhcCbowwvKQEA0EHIIAP32Tfh4QRTTJFezCI1YSoZULTet4IisWOAVkAAAAAAAACLw==
}}}

The hashing function combines three different hashing algorithms with the size of the file to produce a 76-byte identifier:
  # MD5 (16 bytes)
  # SHA-1 (20 bytes) 
  # SHA-256 (32 bytes) 
  # Length of represented data (8 bytes) 

The purpose of combining three different hashing schemes and the length of the data is to reduce the likelihood of collision. Since each hashing scheme is independently generated, the addition of each exponentially reduces the likelihood of collision.
The resulting hash is usually encoded as a base-64 string, but is also often represented using base-16 encoding, particularly when being passed in a URL. Since the identifier is 76 bytes (or 608 bits), there is a total of 2^608 possible hashes, regardless of how it is encoded.